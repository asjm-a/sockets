import socket
import threading
import struct

class lnkserve:
    host = '127.0.0.1'
    ports = [30000, 30001, 30002]  # List of ports to listen on
    sockets = []  # List to store socket objects
    data = None

    @staticmethod
    def handle(client):
        try:
            while True:
                # Receive the length of the incoming data as a 4-byte unsigned integer
                data_length_bytes = client.recv(4)
                if not data_length_bytes:
                    break
                
                data_length = struct.unpack('!I', data_length_bytes)[0]

                # Receive the data in chunks until the complete data is received
                received_data = b''
                while len(received_data) < data_length:
                    remaining_bytes = data_length - len(received_data)
                    chunk = client.recv(min(remaining_bytes, 1024))  # Adjust the chunk size as needed
                    if not chunk:
                        break
                    received_data += chunk
                
                # Print the received data as hexadecimal
                print("Received data:", received_data.hex())

        except ConnectionResetError as c:
            print("Client has left", c)
        except Exception as e:
            print("Error:", e)
        finally:
            client.close()

    @staticmethod
    def start_server(host, port):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.bind((host, port))
        s.listen(5)
        lnkserve.sockets.append(s)
        print(f"Server listening on {host}:{port}")
        while True:
            client, client_address = s.accept()
            print(f"Connection from {client_address}")
            client_thread = threading.Thread(target=lnkserve.handle, args=(client,))
            client_thread.start()

    @staticmethod
    def start_all_servers():
        for port in lnkserve.ports:
            server_thread = threading.Thread(target=lnkserve.start_server, args=(lnkserve.host, port))
            server_thread.start()
    
if __name__ == "__main__":
    lnkserve.start_all_servers()
