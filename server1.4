import socket
import threading
import struct

class lnkserve:
    host = '127.0.0.1'
    ports = [30000, 30001, 30002]  # List of ports to listen on
    sockets = []  # List to store socket objects
    datareq = None 
    data = None
    string_data = None  # New attribute for string data
    decimal_data = None  # Attribute for decimal data
    

        # it is adding an extra '3' after ecery number
    

    @staticmethod
    def handle(client):
        try:
            while True:
                lnkserve.datareq = client.recv(1024)  # Receive binary data
                if not lnkserve.datareq:
                    break
                
                if lnkserve.datareq == b'\001':  # Assuming 0x01 is your binary data request pattern
                    # Respond to binary data request
                    client.sendall(lnkserve.data)  # Send binary data without encoding
                else:
                    lnkserve.data = lnkserve.datareq
                    print("Transferred data:", lnkserve.data.hex())  # Print transferred binary data as hexadecimal string
                    
                
                    #lnkserve.string_data = lnkserve.data.decode('ascii')
                    #print("Transferred string data:", lnkserve.string_data)

                    #try:
                    #    lnkserve.decimal_data = struct.unpack('!d', lnkserve.data)[0]
                    #    print("Transferred decimal data:", lnkserve.decimal_data)
                    #except struct.error:
                    #    print("Error: Unable to unpack binary data as decimal.")
                    
                    
                    
        except ConnectionResetError as c:
            print("client has left", c)
        except Exception as e:
            print("Error:", e)
        finally:
            client.close()








    #@staticmethod
    #def handle(client):
    #    try:
    #        while True:
    #            lnkserve.datareq = client.recv(1024)
    #            if not lnkserve.datareq:
    #                break
    #            
    #            lnkserve.datareq = lnkserve.datareq.decode('utf-32')  # Convert bytes to string
    #            print("Received data:", lnkserve.datareq)
    #            
    #            if lnkserve.datareq != 'GET_DATA':
    #                lnkserve.data = lnkserve.datareq
    #                print("Client Connected:", lnkserve.data)
    #            
    #            # If the client requests data, send the stored data
    #            if lnkserve.datareq.strip() == "GET_DATA":
    #                client.sendall(str(lnkserve.data).encode('utf-32'))  # Send data as bytes
    #            
    #    except ConnectionResetError as c:
    #        print("client has left", c)
    #    except Exception as e:
    #        print("Error:", e)
    #    finally:
    #        client.close()

            

    @staticmethod
    def start_server(host, port):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.bind((host, port))
        s.listen(5)
        lnkserve.sockets.append(s)
        print(f"Server listening on {host}:{port}")
        
        while True:
            client, client_address = s.accept()
            print(f"Connection from {client_address}")
            client_thread = threading.Thread(target=lnkserve.handle, args=(client,))
            client_thread.start()

    @staticmethod
    def start_all_servers():
        for port in lnkserve.ports:
            server_thread = threading.Thread(target=lnkserve.start_server, args=(lnkserve.host, port))
            server_thread.start()
    
if __name__ == "__main__":
    lnkserve.start_all_servers()
